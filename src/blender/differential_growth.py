from bpy import ops, data, types, context
from math import sin, cos, acos, floor
import time, random

# trying to make some differential growth work

DISTANCE = 2.
GRID_SIZE = DISTANCE * 2.
# long
CHAR_LIST = " !#'$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~€¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
# short
# CHAR_LIST = "()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~"
# CHAR_LIST = "012345678"
BASE_PT = (-50., -50., 0.)

START_TIME = time.time()


def time_function(txt: str):
    global START_TIME

    print(txt + ": " + str(time.time() - START_TIME))
    START_TIME = time.time()


# vertex math
def v_add(tpl_a: tuple, tpl_b: tuple) -> tuple:
    return (
        tpl_a[0] + tpl_b[0],
        tpl_a[1] + tpl_b[1],
        tpl_a[2] + tpl_b[2]
    )


def v_sub(tpl_a: tuple, tpl_b: tuple) -> tuple:
    return (
        tpl_a[0] - tpl_b[0],
        tpl_a[1] - tpl_b[1],
        tpl_a[2] - tpl_b[2]
    )


def v_scale(tpl_a: tuple, value: tuple) -> tuple:
    return (
        tpl_a[0] * value,
        tpl_a[1] * value,
        tpl_a[2] * value
    )


def v_len(tpl_a: tuple) -> float:
    return (tpl_a[0] ** 2 + tpl_a[1] ** 2 + tpl_a[2] ** 2) ** .5


def v_distance(tpl_a: tuple, tpl_b: tuple) -> tuple:
    return v_len(v_sub(tpl_a, tpl_b))


def v_sin(tpl: tuple) -> tuple:
    return sin(tpl[0]), sin(tpl[1]), 0


def v_cos(tpl: tuple) -> tuple:
    return cos(tpl[0]), cos(tpl[1]), 1


def v_round(tpl: tuple) -> tuple:
    global GRID_SIZE, BASE_PT

    tpl = v_sub(tpl, BASE_PT)

    x = int(round(tpl[0] / GRID_SIZE))
    y = int(round(tpl[1] / GRID_SIZE))
    z = int(round(tpl[2] / GRID_SIZE))

    return (x, y, z)


def v_mid(tpl_a: tuple, tpl_b: tuple) -> tuple:
    v = v_sub(tpl_b, tpl_a)
    return v_add(tpl_a, v_scale(v, .5))


def v_angle(tpl_a: tuple, tpl_b: tuple) -> float:
    xa, ya, _ = v_scale(tpl_a, 1. / v_len(tpl_a))
    xb, yb, _ = v_scale(tpl_b, 1. / v_len(tpl_b))

    cosine = (xa * xb + ya * yb)

    if cosine < 1. and cosine > -1.:
        angle = acos((xa * xb + ya * yb))
    else:
        angle = 3.1415927

    return angle


def v_hash_dict() -> dict:
    global CHAR_LIST

    new_dict = {}
    for cx in CHAR_LIST:
        for cy in CHAR_LIST:
            new_dict[cx + cy + CHAR_LIST[0]] = []

    return new_dict


def v_dot(a: tuple, b: tuple) -> float:
    ax, ay, az = a
    bx, by, bz = b

    d = ax * bx + ay * by + az * bz
    return d


def v_norm(a: tuple, b: tuple) -> float:
    return 1 - abs(v_dot(a, b))


def v_unit(a: tuple) -> tuple:
    l = v_len(a)
    return a[0] / l, a[1] / l, a[2] / l


def v_hash_dict() -> dict:
    global CHAR_LIST

    new_dict = {}
    for cx in CHAR_LIST:
        for cy in CHAR_LIST:
            new_dict[cx + cy + CHAR_LIST[0]] = []

    return new_dict


def v_round(v: tuple, d_invert: float, c: tuple) -> tuple:
    x, y, z = v_scale(v_sub(v, c), d_invert)

    x = int(floor(x))
    y = int(floor(y))
    z = int(floor(z))

    return (x, y, z)


def v_hash(v: tuple, d_invert: float, c: tuple) -> str:
    global CHAR_LIST

    x, y, z = v_round(v, d_invert, c)

    return CHAR_LIST[x] + CHAR_LIST[y] + CHAR_LIST[z]


def v_hash_neighbours(v: tuple, d_invert: float, c: tuple) -> str:
    global CHAR_LIST

    x, y, z = v_round(v, d_invert, c)

    x = int(floor(x))
    y = int(floor(y))
    z = int(floor(z))

    index_list = []
    for i in range(-1, 2, 1):
        for j in range(-1, 2, 1):
            index_list.append([x - i, y - j, z])

    char_list = []
    for i, j, k in index_list:
        char_list.append(CHAR_LIST[i] + CHAR_LIST[j] + CHAR_LIST[k])

    return char_list


def v_hash_distance(vs: list, d: float, c: tuple, boundary: list) -> dict:
    hash_dict = v_hash_dict()

    d_invert = 1. / d

    # putting points in corresponding dict key
    for v in vs + boundary:
        hash_dict[v_hash(v, d_invert, c)].append(v)

    neighbours = {}

    # calculating dict
    for i, v in enumerate(vs):
        v_nbs = v_hash_neighbours(v, d_invert, c)
        v_biss = []
        n_list = []

        for hsh in v_nbs:
            v_biss.extend(hash_dict[hsh])

        for v_bis in v_biss:
            d = v_distance(v, v_bis)
            if d <= d and not (d < .001):
                n_list.append(v_bis)

        neighbours[v] = n_list

    return neighbours


def v_sin(tpl: tuple) -> tuple:
    return sin(tpl[0]), sin(tpl[1]), sin(tpl[2])


def v_cos(tpl: tuple) -> tuple:
    return cos(tpl[0]), cos(tpl[1]), cos(tpl[2])


def gyroid_distance(v: tuple) -> float:
    # v = v_scale(v, .1)
    # s_x, s_y, _ = v_sin(v)
    # c_x, c_y, _ = v_cos(v)
    #
    # ds = s_x * c_y + s_y
    #
    # return .8 + ds * .3
    return 1.


def curtailed_LennordJones_potential(r0, D, r1=2., max_val=3.) -> float:
    if D > r1:
        return 0.

    s_over_r = r0 / D
    v = (s_over_r ** 12 - s_over_r ** 6)

    if v > max_val:
        return max_val

    return v


def LennordJones_potential(r0, D):
    s_over_r = r0 / D

    return (s_over_r ** 12 - s_over_r ** 6)


def plot_LennordJones_potential(r0, sampling=200):
    delta = 3. / sampling

    vs = []

    for i in range(1, sampling + 1):
        vs.append((i * delta, LennordJones_potential(r0, i * delta), 0.))

    return vs


def v_bounds(vs: list) -> list:
    x, y, z = zip(*vs)

    return [
        (min(x), max(x)),
        (min(y), max(y)),
        (min(z), max(z))
    ]


class Growth:
    def __init__(self, vs, rep, att, rr, ar, jr, sm, ri, repulse_treshold=10):
        self.vs = vs
        self.rep = rep
        self.att = att
        self.rr = rr
        self.ar = ar
        self.sr = ar * 2.
        self.jr = jr
        self.sm = sm
        self.ri = ri

        self._length_dict = {}
        self._treshold_repulse_count = repulse_treshold
        self._growth_count = 0

    def jiggle(self):
        n_vs = []
        for v in self.vs:
            alpha = random.random() * 3.1415927 * 2.
            r = random.random() * self.jr

            n_vs.append(v_add(
                v, (
                    cos(alpha) * r,
                    sin(alpha) * r,
                    0.
                )))

        self.vs = n_vs

    def random_insert(self):
        n_vs = []
        for i in range(len(self.vs)):
            v = self.vs[i]

            n_vs.append(v)
            if random.random() > self.ri and self._length_dict[v] < self._treshold_repulse_count:
                n = self.vs[(i + 1) % len(self.vs)]
                n_vs.append(v_scale(v_add(v, n), .5))

        self.vs = n_vs

    def smoothing(self):
        n_vs = []
        for i in range(len(self.vs)):
            p = self.vs[(i - 1) % len(self.vs)]
            v = self.vs[i]
            n = self.vs[(i + 1) % len(self.vs)]

            vm = v_sub(v_scale(v_add(v, p), .5), v)
            v = v_add(v, v_scale(vm, self.sm))

            n_vs.append(v)

        self.vs = n_vs

    def split(self):
        n_vs = []
        for i in range(len(self.vs)):
            v = self.vs[i]
            n = self.vs[(i + 1) % len(self.vs)]

            n_vs.append(v)
            if v_distance(v, n) > self.sr:
                n_vs.append(v_scale(v_add(v, n), .5))

        self.vs = n_vs

    def repulsion(self, boundary = []):
        c = self.center(boundary)
        v_dict = v_hash_distance(self.vs, self.rr, c, boundary)
        n_vs = []

        self._length_dict = {}

        for va, ovs in v_dict.items():
            vm = (0., 0., 0.)
            for v in ovs:
                d = v_distance(v, va)

                rr = self.rr * gyroid_distance(v)

                if d < rr:
                    sc = self.rep * (1. - d / self.rr) ** 2.
                    vm_loc = v_scale(v_sub(va, v), sc)
                    vm = v_add(vm, vm_loc)

            va = v_add(va, vm)
            self._length_dict[va] = len(ovs)
            n_vs.append(va)

        self.vs = n_vs

    def attraction(self):
        n_vs = []
        for i in range(len(self.vs)):
            p = self.vs[(i - 1) % len(self.vs)]
            v = self.vs[i]
            n = self.vs[(i + 1) % len(self.vs)]

            ar = self.ar * gyroid_distance(v)

            pv = v_sub(p, v)
            pv_l = v_len(pv)
            vm = v_scale(pv, self.att * (pv_l - ar - pv_l))
            nv = v_sub(n, v)
            nv_l = v_len(nv)
            vm = v_add(vm, v_scale(nv, self.att * (nv_l - ar - nv_l)))

            n_vs.append(v_add(v, vm))

        self.vs = n_vs

    def grow(self, boundary):
        self.split()
        self.attraction()
        self.repulsion(boundary)
        self.random_insert()
        self.jiggle()
        self.smoothing()

        self._growth_count += 1

    def plg(self, h = 0):
        vs = [(v[0], v[1], h) for v in self.vs]
        draw_crv_blender(vs)

    def center(self, boundary) -> tuple:
        (x_min, x_max), (y_min, y_max), (z_min, z_max) = v_bounds(self.vs + boundary)
        return (x_max - x_min, y_max - y_min, z_max - z_min)

    def bounds(self, boundary):
        return v_bounds(self.vs + boundary)

    def area(self):
        (x_min, x_max), (y_min, y_max), _ = v_bounds(self.vs)

        return (x_max - x_min) * (y_max - y_min)

    def __repr__(self):
        return "Growth with {} Vertexes, grown {} times".format(len(self.vs), self._growth_count)


def draw_crv_blender(vs):
    # make a new curve
    crv = data.curves.new('crv', 'CURVE')
    crv.dimensions = '3D'

    # make a new spline in that curve
    spline = crv.splines.new(type='POLY')
    spline.order_u = 0

    # a spline point for each point
    spline.points.add(len(vs) - 1)  # theres already one point by default

    # assign the point coordinates to the spline points
    for p, new_co in zip(spline.points, vs):
        # p.co = new_co
        p.co = (list(new_co) + [1.0])  # (add nurbs weight)

    # make a new object with the curve
    obj = data.objects.new('object_name', crv)
    context.scene.collection.objects.link(obj)


def v_circle(cnt, radius=20.):
    vs = []

    for i in range(cnt):
        alfa = i * 3.141527 * 2. / cnt
        vs.append((
            cos(alfa) * radius,
            sin(alfa) * radius,
            0.
        ))

    return vs


def v_circle_random(cnt, radius=5.):
    vs = []

    for i in range(cnt):
        alfa = i * 3.141527 * 2. / cnt
        offset = (random.random() - .5) * .1 * radius
        vs.append((
            cos(alfa) * offset,
            sin(alfa) * offset,
            0.
        ))

    return vs


START_TIME = time.time()


def time_function(txt: str):
    global START_TIME

    print(txt + ' : ' + str(time.time() - START_TIME))
    START_TIME = time.time()

if __name__ == "__main__":
    vs = v_circle_random(80, 25.)

    local_time = time.time()

    gc = Growth(
        vs,
        rep=.6,
        att=.1,
        rr=5.,
        ar=2.5,
        jr=.01,
        sm=.8,
        ri=.995,
        repulse_treshold=10
    )

    # plgs = [gc.plg()]
    perf_per_v_treshold = 0
    vertex_treshold = 20000
    perf_treshold_cnt = 0

    boundary = v_circle(250, 40.)

    bound_vs = [(-73.839153779748614, 0.48861940244731361, 0.0), (-73.995069060106431, 3.46366022950206, 0.0), (-74.461106660799175, 6.4061058877992885, 0.0), (-75.232160576523029, 9.2837183280591908, 0.0), (-76.299782979511861, 12.064969827281796, 0.0), (-77.652276775702887, 14.71938841306596, 0.0), (-79.274823760542603, 17.217891720904316, 0.0), (-81.149646970331247, 19.53310562664381, 0.0), (-83.256205450350507, 21.639664163108094, 0.0), (-85.571419305854306, 23.514487434932644, 0.0), (-88.069922570216676, 25.137034486719489, 0.0), (-90.724341119760908, 26.489528354035393, 0.0), (-93.505592590376679, 27.557150831547581, 0.0), (-96.38320500997628, 28.328204824376762, 0.0), (-99.325650655786077, 28.794242503912024, 0.0), (-102.30069147866308, 28.950157863985762, 0.0), (-105.27573230989556, 28.794242663343848, 0.0), (-108.21817798068022, 28.32820514149364, 0.0), (-111.09579044160043, 27.557151302875116, 0.0), (-113.87704196942987, 26.48952897440962, 0.0), (-116.53146059145396, 25.137035249343466, 0.0), (-119.0299639427683, 23.514488331450885, 0.0), (-121.34517789874349, 21.639665183698174, 0.0), (-123.45173649165278, 19.533106760123925, 0.0), (-125.32655982551324, 17.217892954855824, 0.0), (-126.94910694424723, 14.719389733969436, 0.0), (-128.30160088268801, 12.064971220665132, 0.0), (-129.36922343472355, 9.2837197786561987, 0.0), (-130.14027750465806, 6.406107379716909, 0.0), (-130.60631526303584, 3.4636617463945463, 0.0), (-130.76223070282549, 0.48862092769527304, 0.0), (-130.60631558189948, -2.4864199077149349, 0.0), (-130.1402781388918, -5.4288655909870167, 0.0), (-129.3692243773786, -8.3064780725675362, 0.0), (-128.30160212343645, -11.087729629003796, 0.0), (-126.94910846949517, -13.74214828726782, 0.0), (-125.32656161854975, -16.240651682058132, 0.0), (-123.45173853283293, -18.555865688269016, 0.0), (-121.34518016570371, -20.662424337623328, 0.0), (-119.02996641067131, -22.537247733519703, 0.0), (-116.53146323326092, -24.159794919200817, 0.0), (-113.87704475619654, -25.512288928766466, 0.0), (-111.09579334279444, -26.579911555325349, 0.0), (-108.21818096451548, -27.35096570236518, 0.0), (-105.27573534368054, -27.817003539585496, 0.0), (-102.30069452915902, -27.972919059091055, 0.0), (-99.32565368957107, -27.817004017880965, 0.0), (-96.383207993811581, -27.350966653715815, 0.0), (-93.505595491570745, -26.579912969307948, 0.0), (-90.724343906527636, -25.512290789889139, 0.0), (-88.069925212023705, -24.159797207072735, 0.0), (-85.571421773757407, -22.537250423074436, 0.0), (-83.256207717310858, -20.662427399393575, 0.0), (-81.149649011511514, -18.555869088709358, 0.0), (-79.274825553579234, -16.240655383912667, 0.0), (-77.652278300950968, -13.742152249978233, 0.0), (-76.299784220260463, -11.087733809153796, 0.0), (-75.232161519178248, -8.3064824243585491, 0.0), (-74.461107295033088, -5.4288700667398899, 0.0), (-73.995069378970243, -2.4864244583924102, 0.0), (-73.83915377974877, 0.48861635195139469, 0.0), (-73.995068741242946, 3.4636571957170448, 0.0), (-74.461106026565574, 6.4061029039639843, 0.0), (-75.232159633868108, 9.2837154268651005, 0.0), (-76.299781738763556, 12.064967040515025, 0.0), (-77.652275250455105, 14.719385771258914, 0.0), (-79.274821967506242, 17.217889253001154, 0.0), (-81.149644929151208, 19.533103359683416, 0.0), (-83.256203183390369, 21.639662121927749, 0.0), (-85.571416837951389, 23.514485641895956, 0.0), (-88.069919928409817, 25.137032961471334, 0.0), (-90.724338332994307, 26.489527113286716, 0.0), (-93.505589689182713, 27.557149888892276, 0.0), (-96.383202026141049, 28.32820419014277, 0.0), (-99.325647622001114, 28.794242185048134, 0.0), (-102.30068842816715, 28.950157863985517, 0.0), (-105.27572927611055, 28.794242982207251, 0.0), (-108.21817499684491, 28.328205775727152, 0.0), (-111.09578754040632, 27.557152245529949, 0.0), (-113.87703918266305, 26.489530215157853, 0.0), (-116.53145794964684, 25.137036774591198, 0.0), (-119.0299614748651, 23.514490124487175, 0.0), (-121.34517563178304, 21.639667224878153, 0.0), (-123.45173445047237, 19.533109027084006, 0.0), (-125.3265580324765, 17.217895422758684, 0.0), (-126.94910541899901, 14.719392375776241, 0.0), (-128.30159964193925, 12.064974007431712, 0.0), (-129.36922249206816, 9.2837226798501504, 0.0), (-130.14027687042397, 6.4061103635521084, 0.0), (-130.60631494417186, 3.4636647801795077, 0.0), (-130.76223070282515, 0.48862397819121728, 0.0), (-130.60631590076281, -2.4864168739299299, 0.0), (-130.14027877312523, -5.4288626071516815, 0.0), (-129.36922532003337, -8.3064751713733926, 0.0), (-128.30160336418461, -11.08772684223694, 0.0), (-126.94910999474283, -13.742145645460695, 0.0), (-125.32656341158597, -16.240649214154882, 0.0), (-123.45174057401287, -18.555863421308494, 0.0), (-121.34518243266372, -20.66242229644288, 0.0), (-119.02996887857414, -22.53724594048289, 0.0), (-73.839153779748614, 0.48861940244731361, 0.0), (-74.999999999999972, 80.0, 0.0), (-77.499590135332085, 79.960940772075389, 0.0), (-79.99674222641238, 79.843801056329909, 0.0), (-82.489013258683769, 79.648695409349031, 0.0), (-84.973973321047822, 79.375814050572259, 0.0), (-87.449191846044755, 79.025423898770541, 0.0), (-89.912255963488974, 78.597866523712867, 0.0), (-92.360766155758014, 78.093557983261903, 0.0), (-94.79231097454992, 77.512995209104844, 0.0), (-97.204532819679059, 76.856741553749188, 0.0), (-99.595073680337052, 76.12543826250716, 0.0), (-101.96159595722386, 75.319800473975008, 0.0), (-104.30179918194671, 74.440610990915872, 0.0), (-106.6133816679411, 73.488734507522196, 0.0), (-108.89409543901932, 72.465097076942143, 0.0), (-111.14171259557416, 71.370698544002749, 0.0), (-113.35403724372509, 70.206608144155112, 0.0), (-115.52891580915859, 68.973958733235946, 0.0), (-117.66421301669594, 67.673960484561491, 0.0), (-119.7578495745928, 66.30787963325416, 0.0), (-121.80777448268471, 64.877054865168844, 0.0), (-123.81199844150872, 63.382874722957681, 0.0), (-125.76856321068362, 61.826798312081628, 0.0), (-127.67554717852067, 60.210354005299131, 0.0), (-129.5310960128686, 58.535113971318964, 0.0), (-131.33339626507853, 56.802715298140754, 0.0), (-133.08068793888279, 55.014849709384045, 0.0), (-134.77126941341373, 53.173257871876807, 0.0), (-136.40348304824997, 51.279745217222704, 0.0), (-137.97573753034601, 49.336157962583258, 0.0), (-139.48649690456901, 47.344394778864903, 0.0), (-140.93428513155951, 45.306401801403425, 0.0), (-142.31767911724174, 43.224183951441702, 0.0), (-143.63534775516916, 41.099744993454593, 0.0), (-144.88599514002246, 38.935172829830279, 0.0), (-146.06840003405904, 36.732581131727699, 0.0), (-147.18140783690728, 34.494120697331319, 0.0), (-148.22393314100606, 32.221974107144284, 0.0), (-149.19495342825334, 29.918370373055367, 0.0), (-150.09352532778163, 27.585547916360326, 0.0), (-150.91876966207823, 25.225788649640009, 0.0), (-151.66988059152942, 22.84139685046916, 0.0), (-152.3461246673254, 20.434700852876688, 0.0), (-152.94684151924244, 18.008050898809142, 0.0), (-153.47144473347015, 15.563815773836751, 0.0), (-153.91942187851291, 13.104382868387752, 0.0), (-154.29033551160384, 10.632153801431748, 0.0), (-154.58382344368039, 8.1495426917780218, 0.0), (-154.79959909372315, 5.6589738010576252, 0.0), (-154.93745176934459, 3.1628791667876048, 0.0), (-154.99724690044462, 0.66369296312342374, 0.0), (-154.97892616528884, -1.8361289299170473, 0.0), (-154.88250747292778, -4.3341665678232388, 0.0), (-154.70808485827382, -6.8279724828253059, 0.0), (-154.45582820560841, -9.3151148227402452, 0.0), (-154.12598511362282, -11.79315393771911, 0.0), (-153.71887653571878, -14.259680114023071, 0.0), (-153.234900875156, -16.712279469136188, 0.0), (-152.67452921349974, -19.148564214091166, 0.0), (-152.03831068650092, -21.566146771506514, 0.0), (-151.32686512435157, -23.962672227634453, 0.0), (-150.54088755323394, -26.335798975342861, 0.0), (-149.68114352511614, -28.683214634712851, 0.0), (-148.74847743635164, -31.002614015916951, 0.0), (-147.74379666402339, -33.291741421908483, 0.0), (-146.66808258489118, -35.548360561426996, 0.0), (-145.52238757565314, -37.770264105898995, 0.0), (-144.30782238661979, -39.95529697079931, 0.0), (-143.02558386711786, -42.101305674975336, 0.0), (-141.67691935434033, -44.20620347207835, 0.0), (-140.26314590342992, -46.267934758184467, 0.0), (-138.78564512085489, -48.284484842611256, 0.0), (-137.24585740404959, -50.253887770347951, 0.0), (-135.645290313369, -52.174215497764699, 0.0), (-133.98550216362003, -54.043598459998734, 0.0), (-132.26811539904557, -55.860209081613739, 0.0), (-130.49480728471104, -57.622273162664996, 0.0), (-128.66730470386378, -59.328074347838403, 0.0), (-126.78739870430475, -60.975940627770356, 0.0), (-124.85692224610756, -62.564265392838962, 0.0), (-122.87776109174368, -64.091497040105963, 0.0), (-120.85184895567357, -65.556143475238798, 0.0), (-118.7811656511808, -66.956773624659263, 0.0), (-116.66774602109786, -68.292012281973967, 0.0), (-114.5136240233128, -69.560574440873296, 0.0), (-112.32091764228848, -70.761211877253217, 0.0), (-110.09176802291381, -71.892752187032073, 0.0), (-107.82834549568776, -72.954093319126088, 0.0), (-105.53287957876216, -73.944190201994971, 0.0), (-103.20759216742853, -74.86208482346737, 0.0), (-100.85476052754049, -75.706877878192387, 0.0), (-98.476682171167369, -76.477744437411289, 0.0), (-96.075679266485352, -77.173931761030801, 0.0), (-93.654089344893904, -77.794761717693547, 0.0), (-91.214298407399355, -78.339622970472661, 0.0), (-88.758666660247755, -78.80798875578661, 0.0), (-86.289599847636509, -79.199399841667031, 0.0), (-83.809508999232051, -79.513474022912931, 0.0), (-81.320815914331874, -79.749904615473568, 0.0), (-78.825950797336219, -79.908460756645553, 0.0), (-76.327348717101344, -79.988987650696089, 0.0), (-73.827412865101977, -80.0, 0.0), (-71.327412865101905, -80.0, 0.0), (-68.827412865101948, -80.0, 0.0), (-66.327412865101863, -80.0, 0.0), (-63.82741286510192, -80.0, 0.0), (-61.327412865101834, -80.0, 0.0), (-58.827412865101977, -80.0, 0.0), (-56.327412865101898, -80.0, 0.0), (-53.827412865101948, -80.0, 0.0), (-51.327412865101877, -80.0, 0.0), (-48.827412865102012, -80.0, 0.0), (-46.327412865101834, -80.0, 0.0), (-43.827412865101863, -80.0, 0.0), (-41.327412865101905, -80.0, 0.0), (-38.827412865101948, -80.0, 0.0), (-36.327412865101977, -80.0, 0.0), (-33.827412865101898, -80.0, 0.0), (-31.327412865101838, -80.0, 0.0), (-28.827412865101863, -80.0, 0.0), (-26.327412865101905, -80.000000000000028, 0.0), (-23.827412865101831, -80.0, 0.0), (-21.327412865101973, -80.0, 0.0), (-18.827412865102119, -80.0, 0.0), (-16.327412865101824, -80.0, 0.0), (-13.827412865101966, -80.0, 0.0), (-11.327412865102112, -80.0, 0.0), (-8.8274128651020405, -80.0, 0.0), (-6.327412865101973, -80.0, 0.0), (-3.8274128651019055, -80.0, 0.0), (-1.3274128651018273, -80.0, 0.0), (1.1725871348980306, -80.0, 0.0), (3.6725871348981016, -80.0, 0.0), (6.1725871348981745, -80.0, 0.0), (8.6725871348980323, -80.0, 0.0), (11.172587134898107, -80.0, 0.0), (13.672587134897963, -80.0, 0.0), (16.172587134898038, -80.000000000000028, 0.0), (18.672587134898116, -80.0, 0.0), (21.172587134898176, -80.0, 0.0), (23.672587134898034, -80.0, 0.0), (26.172587134898109, -80.0, 0.0), (28.67258713489818, -80.0, 0.0), (31.172587134898034, -80.0, 0.0), (33.672587134898116, -80.0, 0.0), (36.172587134898187, -80.0, 0.0), (38.672587134898045, -80.0, 0.0), (41.172587134898109, -80.0, 0.0), (43.67258713489818, -80.0, 0.0), (46.172587134898038, -80.0, 0.0), (48.672587134898109, -80.0, 0.0), (51.172587134898187, -80.0, 0.0), (53.672587134898045, -80.0, 0.0), (56.172587134898116, -80.0, 0.0), (58.672587134897981, -80.0, 0.0), (61.172587134898038, -80.0, 0.0), (63.672587134898116, -80.0, 0.0), (66.172587134898194, -80.0, 0.0), (68.672587134898038, -80.0, 0.0), (71.172587134898123, -80.0, 0.0), (73.67258713489818, -80.0, 0.0), (76.172541964200732, -79.991406696858306, 0.0), (78.67129296850473, -79.915715650549018, 0.0), (81.166452977538498, -79.761988802159465, 0.0), (83.655610003103988, -79.530374169081867, 0.0), (86.136298819137309, -79.221101031296456, 0.0), (88.606117154450502, -78.834469465959913, 0.0), (91.062650268733179, -78.370857251559812, 0.0), (93.50349998177866, -77.830716869525986, 0.0), (95.926276643968038, -77.21457728835999, 0.0), (98.328621645277082, -76.523038440273083, 0.0), (100.70818734042611, -75.756775958785056, 0.0), (103.06265639301228, -74.916535665817648, 0.0), (105.38971289494638, -74.003144191059377, 0.0), (107.6870963055262, -73.01748924136777, 0.0), (109.95256207404239, -71.960533658806426, 0.0), (112.18389745225252, -70.833309750853559, 0.0), (114.378928177483, -69.636915609413904, 0.0), (116.53550063934094, -68.372525086026386, 0.0), (118.65151478300436, -67.04136974398088, 0.0), (120.72490409822996, -65.644749563142312, 0.0), (122.75364118651224, -64.184030361374454, 0.0), (124.73575038274727, -62.660634643012159, 0.0), (126.66929315961708, -61.07605213490428, 0.0), (128.5523814315568, -59.431830217561433, 0.0), (130.38317736844149, -57.729573570014779, 0.0), (132.15989256633407, -55.970944978668562, 0.0), (133.88079211201111, -54.157661694926674, 0.0), (135.54420077840138, -52.291488333232763, 0.0), (137.14848648063921, -50.374255609048959, 0.0), (138.69208525025869, -48.407832800836864, 0.0), (140.1734890445959, -46.394141071410488, 0.0), (141.5912504461524, -44.335148178593094, 0.0), (142.94397662785258, -42.232878660988987, 0.0), (144.2303662329773, -40.089355086454489, 0.0), (145.44915355877993, -37.906684936188313, 0.0), (146.59914847818678, -35.686999554439531, 0.0), (147.67922803853753, -33.432466431931942, 0.0), (148.68833937542038, -31.145282790382094, 0.0), (149.62549340099542, -28.827690414911508, 0.0), (150.48977688811738, -26.481948292794918, 0.0), (151.28034587582232, -24.110347012536277, 0.0), (151.99642838471016, -21.715202416698865, 0.0), (152.63732517113183, -19.298853340857793, 0.0), (153.20240929385776, -16.863664507927869, 0.0), (153.69113146588856, -14.412002935686747, 0.0), (154.10301304777497, -11.946268319586062, 0.0), (154.43765184454594, -9.4688684342271756, 0.0), (154.69472109029547, -6.9822224499089032, 0.0), (154.87396976796771, -4.4887585706712825, 0.0), (154.97522280513107, -1.9909136770950451, 0.0), (154.99838152055867, 0.50887531983622702, 0.0), (154.94342330036511, 3.0081673854090107, 0.0), (154.81040167697182, 5.5045239721903751, 0.0), (154.59944615688869, 7.9955094594765956, 0.0), (154.31076428886746, 10.478676820844395, 0.0), (153.94463638585009, 12.951617115477049, 0.0), (153.50142019727485, 15.411911854500154, 0.0), (152.98154733620419, 17.857163129997438, 0.0), (152.3855291260887, 20.28496689362041, 0.0), (151.71394459863657, 22.692965961225003, 0.0), (150.96744994287403, 25.078806773387932, 0.0), (150.14677435964799, 27.440158588101383, 0.0), (149.25271732267308, 29.774720321091166, 0.0), (148.28615605969702, 32.080201526700726, 0.0), (147.24803173405562, 34.354357955794917, 0.0), (146.13935830489001, 36.594968232920671, 0.0), (144.96121850214584, 38.799844145241181, 0.0), (143.71476028247392, 40.966836823486162, 0.0), (142.4012057408998, 43.093821653142982, 0.0), (141.0218349607803, 45.17872628142019, 0.0), (139.57799826892281, 47.21951015818572, 0.0), (138.07109922030159, 49.214189449211318, 0.0), (136.50261078393115, 51.160813781255186, 0.0), (134.87406844723563, 53.057477583991336, 0.0), (133.18705914726493, 54.902332808294176, 0.0), (131.44323114702539, 56.69357686443378, 0.0), (129.64428725931191, 58.429460633500604, 0.0), (127.79197866181865, 60.108293845109969, 0.0), (125.88812167150388, 61.728430020098628, 0.0), (123.93457262347508, 63.288289613149168, 0.0), (121.93323999912401, 64.786348740954892, 0.0), (119.88607936817263, 66.221143745439079, 0.0), (117.79510150754547, 67.591266351200133, 0.0), (115.66232383529533, 68.895394768544364, 0.0), (113.48984009227674, 70.132248000980013, 0.0), (111.27977167547385, 71.300618280457314, 0.0), (109.03427668432062, 72.399364711129238, 0.0), (106.755547188525, 73.427414653910844, 0.0), (104.44581346545502, 74.383762135009178, 0.0), (102.10732242021132, 75.267476848946558, 0.0), (99.742361546364634, 76.077694136382561, 0.0), (97.353240201395607, 76.813622831492012, 0.0), (94.9422913383479, 77.474544310866747, 0.0), (92.511869798987348, 78.05981306756577, 0.0), (90.064347147233022, 78.568857984748988, 0.0), (87.602114442264551, 79.001181710048272, 0.0), (85.127576037918175, 79.356362086452677, 0.0), (82.643148309010343, 79.634052288744357, 0.0), (80.151257292111566, 79.833981162851131, 0.0), (77.654336316878641, 79.955953491387376, 0.0), (75.154823081808289, 79.999850186193115, 0.0), (72.654825730203683, 80.0, 0.0), (70.154825730203825, 80.0, 0.0), (67.654825730203754, 80.0, 0.0), (65.154825730203697, 80.0, 0.0), (62.654825730203839, 80.0, 0.0), (60.154825730203775, 80.0, 0.0), (57.65482573020391, 80.0, 0.0), (55.154825730203832, 80.0, 0.0), (52.654825730203768, 80.0, 0.0), (50.154825730203697, 80.0, 0.0), (47.654825730203839, 80.0, 0.0), (45.154825730203981, 80.0, 0.0), (42.654825730203925, 80.0, 0.0), (40.154825730203854, 80.0, 0.0), (37.654825730203768, 80.0, 0.0), (35.154825730203918, 80.0, 0.0), (32.654825730203839, 80.0, 0.0), (30.154825730203768, 80.0, 0.0), (27.654825730203918, 80.0, 0.0), (25.15482573020364, 80.000000000000028, 0.0), (22.654825730203779, 80.000000000000028, 0.0), (20.154825730203921, 80.000000000000028, 0.0), (17.65482573020385, 80.0, 0.0), (15.154825730203775, 80.0, 0.0), (12.654825730203921, 80.0, 0.0), (10.154825730203852, 80.0, 0.0), (7.654825730203779, 80.0, 0.0), (5.1548257302039211, 80.0, 0.0), (2.6548257302040632, 80.0, 0.0), (0.15482573020378254, 80.0, 0.0), (-2.3451742697960754, 80.0, 0.0), (-4.8451742697961429, 80.0, 0.0), (-7.3451742697962157, 80.0, 0.0), (-9.8451742697960736, 80.0, 0.0), (-12.345174269796356, 80.0, 0.0), (-14.845174269796216, 80.0, 0.0), (-17.345174269796072, 80.0, 0.0), (-19.845174269796143, 80.000000000000028, 0.0), (-22.345174269796214, 80.0, 0.0), (-24.845174269796281, 80.0, 0.0), (-27.345174269796136, 80.0, 0.0), (-29.845174269796203, 80.0, 0.0), (-32.345174269796281, 80.0, 0.0), (-34.845174269796139, 80.0, 0.0), (-37.34517426979621, 80.0, 0.0), (-39.845174269796075, 80.0, 0.0), (-42.345174269796345, 80.0, 0.0), (-44.845174269796203, 80.0, 0.0), (-47.345174269796061, 80.0, 0.0), (-49.845174269796132, 80.0, 0.0), (-52.345174269796203, 80.0, 0.0), (-54.845174269796061, 80.0, 0.0), (-57.34517426979636, 80.0, 0.0), (-59.84517426979621, 80.0, 0.0), (-62.345174269796267, 80.0, 0.0), (-64.845174269796132, 80.0, 0.0), (-67.345174269796189, 80.0, 0.0), (-69.845174269796047, 80.0, 0.0), (-72.345174269796118, 80.0, 0.0), (-74.845174269796189, 80.0, 0.0), (-74.999999999999972, 80.0, 0.0), (-74.999999999999972, 80.0, 0.0), (133.46153846153845, 7.1207775002374292e-13, 0.0), (133.30562318118064, 2.9750408270554582, 0.0), (132.83958558048789, 5.9174864853526872, 0.0), (132.06853166476404, 8.7950989256125904, 0.0), (131.00090926177521, 11.576350424835194, 0.0), (129.64841546558418, 14.23076901061936, 0.0), (128.02586848074446, 16.729272318457713, 0.0), (126.15104527095582, 19.044486224197207, 0.0), (124.04448679093656, 21.151044760661492, 0.0), (121.72927293543276, 23.025868032486041, 0.0), (119.23076967107039, 24.648415084272887, 0.0), (116.57635112152616, 26.000908951588791, 0.0), (113.79509965091039, 27.068531429100979, 0.0), (110.91748723131079, 27.83958542193016, 0.0), (107.97504158550099, 28.305623101465422, 0.0), (105.00000076262398, 28.46153846153916, 0.0), (102.02495993139151, 28.305623260897246, 0.0), (99.082514260606843, 27.839585739047038, 0.0), (96.204901799686638, 27.068531900428514, 0.0), (93.423650271857198, 26.000909571963017, 0.0), (90.769231649833102, 24.648415846896864, 0.0), (88.270728298518762, 23.025868929004282, 0.0), (85.95551434254358, 21.151045781251572, 0.0), (83.848955749634285, 19.044487357677323, 0.0), (81.974132415773823, 16.729273552409222, 0.0), (80.351585297039833, 14.230770331522834, 0.0), (78.99909135859906, 11.576351818218532, 0.0), (77.931468806563529, 8.7951003762095983, 0.0), (77.160414736629008, 5.9174879772703077, 0.0), (76.694376978251228, 2.9750423439479445, 0.0), (76.538461538461576, 1.5252486715332253e-06, 0.0), (76.694376659387586, -2.9750393101615367, 0.0), (77.160414102395265, -5.917484993433618, 0.0), (77.931467863908466, -8.7950974750141366, 0.0), (78.999090117850614, -11.576349031450398, 0.0), (80.351583771791894, -14.230767689714423, 0.0), (81.97413062273732, -16.729271084504735, 0.0), (83.848953708454133, -19.044485090715618, 0.0), (85.955512075583357, -21.15104374006993, 0.0), (88.27072583061576, -23.025867135966305, 0.0), (90.769229008026144, -24.648414321647419, 0.0), (93.423647485090527, -26.000908331213068, 0.0), (96.20489889849263, -27.068530957771952, 0.0), (99.082511276771584, -27.839585104811782, 0.0), (102.02495689760653, -28.305622942032098, 0.0), (104.99999771212805, -28.461538461537657, 0.0), (107.975038551716, -28.305623420327567, 0.0), (110.91748424747549, -27.839586056162418, 0.0), (113.79509674971632, -27.06853237175455, 0.0), (116.57634833475943, -26.000910192335741, 0.0), (119.23076702926336, -24.648416609519337, 0.0), (121.72927046752966, -23.025869825521038, 0.0), (124.04448452397621, -21.151046801840177, 0.0), (126.15104322977555, -19.04448849115596, 0.0), (128.02586668770783, -16.729274786359269, 0.0), (129.6484139403361, -14.230771652424833, 0.0), (131.00090802102662, -11.576353211600397, 0.0), (132.06853072210882, -8.7951018268051495, 0.0), (132.83958494625398, -5.9174894691864912, 0.0), (133.30562286231682, -2.975043860839012, 0.0), (133.46153846153828, -3.0504952068331963e-06, 0.0), (133.30562350004411, 2.975037793270443, 0.0), (132.83958621472149, 5.917483501517383, 0.0), (132.06853260741894, 8.7950960244184984, 0.0), (131.00091050252351, 11.576347638068423, 0.0), (129.64841699083198, 14.230766368812311, 0.0), (128.02587027378081, 16.729269850554552, 0.0), (126.15104731213586, 19.044483957236814, 0.0), (124.0444890578967, 21.151042719481147, 0.0), (121.72927540333568, 23.025866239449353, 0.0), (119.23077231287725, 24.648413559024732, 0.0), (116.57635390829276, 26.000907710840114, 0.0), (113.79510255210435, 27.068530486445674, 0.0), (110.91749021514602, 27.839584787696168, 0.0), (107.97504461928595, 28.305622782601532, 0.0), (105.00000381311992, 28.461538461538915, 0.0), (102.02496296517651, 28.305623579760649, 0.0), (99.082517244442158, 27.83958637328055, 0.0), (96.204904700880746, 27.068532843083347, 0.0), (93.423653058624012, 26.00091081271125, 0.0), (90.769234291640231, 24.648417372144596, 0.0), (88.270730766421963, 23.025870722040573, 0.0), (85.955516609504031, 21.151047822431551, 0.0), (83.848957790814694, 19.044489624637404, 0.0), (81.974134208810568, 16.729276020312081, 0.0), (80.351586822288056, 14.230772973329639, 0.0), (78.999092599347819, 11.576354604985111, 0.0), (77.931469749218905, 8.7951032774035482, 0.0), (77.160415370863092, 5.9174909611055071, 0.0), (76.694377297115196, 2.975045377732906, 0.0), (76.538461538461902, 4.5757446157230831e-06, 0.0), (76.694376340524258, -2.9750362763765317, 0.0), (77.160413468161835, -5.9174820095982827, 0.0), (77.931466921253701, -8.7950945738199948, 0.0), (78.999088877102452, -11.576346244683542, 0.0), (80.35158224654424, -14.230765047907298, 0.0), (81.974128829701101, -16.729268616601484, 0.0), (83.848951667274193, -19.044482823755096, 0.0), (85.955509808623347, -21.151041698889482, 0.0), (88.270723362712928, -23.025865342929492, 0.0), (133.46153846153845, 7.1207775002374292e-13, 0.0)]

    draw_crv_blender(bound_vs)

    for i in range(200):
        try:
            gc.grow(bound_vs)
        except:
            print("growth area: {}".format(gc.area()))
            break
        lc_time = time.time() - local_time
        local_time = time.time()
        perf_val = round(len(gc.vs) / lc_time)
        if perf_val < perf_per_v_treshold:
            perf_treshold_cnt += 1
        else:
            perf_treshold_cnt = 0

        if (perf_treshold_cnt > 3 and len(gc.vs) > 100) or len(gc.vs) > vertex_treshold:
            break

        #        plgs.append(gc.plg())
        if i % 100 == 0:
            gc.plg(i * .02)
            time_function("loop {}".format(i))
            print("growth area: {}".format(gc.area()))
            print(str(gc) + '\n')

        elif i % 5 == 0:
            print('\b{} - {}, '.format(len(gc.vs), perf_val))
    # plgs.reverse()

    gc.plg(i)